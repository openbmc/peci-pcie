{
  "comments": [
    {
      "key": {
        "uuid": "9acf27d8_33a2782b",
        "filename": "src/pci_ids.cpp",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2021-06-02T21:45:18Z",
      "side": 1,
      "message": "I think boost::flat_map is preferred for efficiency.",
      "revId": "0c87250226f287101d6e44bb2aae5f73a63b6cf0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9eb4f79_95341004",
        "filename": "src/pci_ids.cpp",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2021-06-21T13:32:52Z",
      "side": 1,
      "message": "It generally not so big to have any performance difference: this map only cache entries for devices found in the system. I believe we will have not more then ~10 entries for each.",
      "parentUuid": "9acf27d8_33a2782b",
      "revId": "0c87250226f287101d6e44bb2aae5f73a63b6cf0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed8d7094_f0a75b36",
        "filename": "src/pci_ids.cpp",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-06-23T23:21:54Z",
      "side": 1,
      "message": "flat_map uses less memory because values are packed and there is no per-key overhead.\n\nThey\u0027re generally a good fit for things like this which are write-once read many in a limited environment (ie the BMC)",
      "parentUuid": "d9eb4f79_95341004",
      "revId": "0c87250226f287101d6e44bb2aae5f73a63b6cf0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2de673d4_a3bf9680",
        "filename": "src/pci_ids.cpp",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-06-23T23:21:54Z",
      "side": 1,
      "message": "Don\u0027t declare as static.  This will use memory the whole life of the program for something that is temporal.",
      "range": {
        "startLine": 37,
        "startChar": 4,
        "endLine": 37,
        "endChar": 10
      },
      "revId": "0c87250226f287101d6e44bb2aae5f73a63b6cf0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f96fab47_a231b984",
        "filename": "src/pci_ids.cpp",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2021-06-24T08:57:43Z",
      "side": 1,
      "message": "My initial input to make it static was to exclude regexp compilation on each run, so here is trade of between memory and speed. But this compilation defensively not the most heavy operation here, so you probably right.",
      "parentUuid": "2de673d4_a3bf9680",
      "range": {
        "startLine": 37,
        "startChar": 4,
        "endLine": 37,
        "endChar": 10
      },
      "revId": "0c87250226f287101d6e44bb2aae5f73a63b6cf0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a23e0f9_1e3063c8",
        "filename": "src/pci_ids.cpp",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-06-23T23:21:54Z",
      "side": 1,
      "message": "std::array please.",
      "range": {
        "startLine": 47,
        "startChar": 8,
        "endLine": 47,
        "endChar": 24
      },
      "revId": "0c87250226f287101d6e44bb2aae5f73a63b6cf0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa07f140_04a2e720",
        "filename": "src/pci_ids.cpp",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2021-06-24T08:57:43Z",
      "side": 1,
      "message": "why is it better?",
      "parentUuid": "7a23e0f9_1e3063c8",
      "range": {
        "startLine": 47,
        "startChar": 8,
        "endLine": 47,
        "endChar": 24
      },
      "revId": "0c87250226f287101d6e44bb2aae5f73a63b6cf0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "441d54ab_d46ecc15",
        "filename": "src/pci_ids.cpp",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-06-23T23:21:54Z",
      "side": 1,
      "message": "This range check is incorrect.  tmpStr has been incremented, sizeof(tmpStr) is no longer the limit.",
      "range": {
        "startLine": 50,
        "startChar": 25,
        "endLine": 50,
        "endChar": 39
      },
      "revId": "0c87250226f287101d6e44bb2aae5f73a63b6cf0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5f85ac1_439e36ff",
        "filename": "src/pci_ids.cpp",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2021-06-24T08:57:43Z",
      "side": 1,
      "message": "No, it is not incremented, it still char array of 16 bytes.\nBut probably I should use sstream here instead of snprintf.",
      "parentUuid": "441d54ab_d46ecc15",
      "range": {
        "startLine": 50,
        "startChar": 25,
        "endLine": 50,
        "endChar": 39
      },
      "revId": "0c87250226f287101d6e44bb2aae5f73a63b6cf0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07b04577_dedd4df5",
        "filename": "src/pci_ids.cpp",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-06-23T23:21:54Z",
      "side": 1,
      "message": "Why static?  Maybe constexpr here instead?",
      "range": {
        "startLine": 57,
        "startChar": 4,
        "endLine": 57,
        "endChar": 10
      },
      "revId": "0c87250226f287101d6e44bb2aae5f73a63b6cf0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a26264ad_6667f0f6",
        "filename": "src/pci_ids.cpp",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2021-06-24T08:57:43Z",
      "side": 1,
      "message": "good point",
      "parentUuid": "07b04577_dedd4df5",
      "range": {
        "startLine": 57,
        "startChar": 4,
        "endLine": 57,
        "endChar": 10
      },
      "revId": "0c87250226f287101d6e44bb2aae5f73a63b6cf0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b45cda29_d2a313c9",
        "filename": "src/pci_ids.cpp",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-06-23T23:21:54Z",
      "side": 1,
      "message": "Is there a way to move this parsing to compile time\u003e  it seems fairly inefficient to be reading in and parsing this file once per device found.",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 61,
        "endChar": 38
      },
      "revId": "0c87250226f287101d6e44bb2aae5f73a63b6cf0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5b44f06_1d3d4f67",
        "filename": "src/pci_ids.cpp",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2021-06-24T08:57:43Z",
      "side": 1,
      "message": "Hm, this, probably, good way to go, but then require completely new solution...",
      "parentUuid": "b45cda29_d2a313c9",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 61,
        "endChar": 38
      },
      "revId": "0c87250226f287101d6e44bb2aae5f73a63b6cf0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc424fb4_87400d33",
        "filename": "src/pci_ids.cpp",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2021-06-24T09:02:29Z",
      "side": 1,
      "message": "Note that in this case we will have to load entire list to the memory.\nTaking in account the fact that there typically not so many devices installed and they not so frequently changes, I would prefer to load entries on demand.",
      "parentUuid": "e5b44f06_1d3d4f67",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 61,
        "endChar": 38
      },
      "revId": "0c87250226f287101d6e44bb2aae5f73a63b6cf0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5b11541_fe11c325",
        "filename": "src/pci_ids.cpp",
        "patchSetId": 2
      },
      "lineNbr": 336,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-06-23T23:21:54Z",
      "side": 1,
      "message": "Instead of packing this way, does it make more sense to have a real struct for this, with a std::hash method implemented?  That seems like it would be a lot more clear than embedding the values into a uint64_t then taking advantage of the fact that std::hash is already implemented for it.\n\nThe new struct could still call std::hash under the covers, and do the cacheKey algorithm in the background, but it would be more clear.",
      "range": {
        "startLine": 336,
        "startChar": 4,
        "endLine": 336,
        "endChar": 12
      },
      "revId": "0c87250226f287101d6e44bb2aae5f73a63b6cf0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7aff2ab_aeb8d2bc",
        "filename": "src/pci_ids.cpp",
        "patchSetId": 2
      },
      "lineNbr": 336,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2021-06-24T08:57:43Z",
      "side": 1,
      "message": "Will it work more effective with std::hash or just looks better?",
      "parentUuid": "c5b11541_fe11c325",
      "range": {
        "startLine": 336,
        "startChar": 4,
        "endLine": 336,
        "endChar": 12
      },
      "revId": "0c87250226f287101d6e44bb2aae5f73a63b6cf0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}